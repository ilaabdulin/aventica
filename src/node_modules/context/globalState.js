import React, {useReducer} from 'react' 
import axios from 'axios'

import {
    SHOW_DRAFT, FETCH_DRAFT, 
    ADD_DRAFT, REMOVE_DRAFT, ADD_CARDS,
    FETCH_CARDS, REMOVE_CARD, ADD_MARKER,
    DELETE_MARKER
} from './actionTypes'
import {GlobalContext} from './globalContext'
import {reducer} from './reducer'

// ЗАРАНее извиняюсь за множество функций, я начал с глобального 
// контекста и туда все запихнул,
// я, честно , могу не городить много, но тут как начал, так и продолжил 

const url = process.env.REACT_APP_DB_URL;

export const GlobalState = ({children}) => {

    // Инициализируем глобальное состояние 

    const initialState = {
        cards: [],
        notes: [], 
        loading: false,
        count: 0
    }

    //Используем хук редьюсера 

    const [state, dispatch] = useReducer(reducer, initialState);

    // Диспатчим драфты

    const showDraft = () => dispatch({type: SHOW_DRAFT})

    const fetchDraft = async () =>  {

        showDraft();
        const res = await axios.get(`${url}/notes.json`)
        
        const payload = Object.keys(res.data).map(key => {
            return {...res.data[key], id: key}   
        })

        dispatch({
            type: FETCH_DRAFT, 
            payload
        })
    }

    const removeDraft = async id => {
        await axios.delete(`${url}/notes/${id}.json`)

        dispatch({
            type: REMOVE_DRAFT,
            payload: id
        })
    }

    // Диспатчим все карты

    const fetchCards = async () =>  {
        showDraft();
        const res = await axios.get(`${url}/cards.json`)
        
        const payload = Object.keys(res.data).map(key => {
            return {...res.data[key], id: key}
        })

        dispatch({
            type: FETCH_CARDS, 
            payload
        })

        
    }

    const addCard = async (text, typeClick) => {
        const note = {
            text
        }
        if (typeClick === "draft") {
            const res = await axios.post(`${url}/notes.json`, note)

            const payload = {
                ...note,
                id: res.data.name
            }
        
            dispatch({
                type: ADD_DRAFT,
                payload
            })}
        else if (typeClick === "save") {
            const resCards = await axios.post(`${url}/cards.json`, note)

            const card = {
                ...note,
                id: resCards.data.name
            }
    
            dispatch({
                type: ADD_CARDS,
                card
            })
        }
        
    }

    const removeCard = async id => {
        await axios.delete(`${url}/cards/${id}.json`)

        dispatch({
            type: REMOVE_CARD,
            payload: id
        })
    }

    // Меняем маркер и ставим каунт, блин

    const addMarker = card => {
        if (card.col) {
            card.col = false;
            dispatch({
                type: DELETE_MARKER
            })
            console.log("DELETE", state)
        } else {
            card.col = true;
            dispatch({
                type: ADD_MARKER
            })
            console.log("ADD", state )
        }
    }

    // ЭТА ФУНКЦИЯ ВЕРХ МОЕЙ НЕКОМПЕТЕННТНОСТИ АААААААААААААА

    const renameDraft = async (text , id) => {
        const note = {
            text
        }
        await axios.delete(`${url}/notes/${id}.json`)

        const res = await axios.post(`${url}/notes.json`, note)

        const payload = {
            ...note,
            id: res.data.name
        }

        dispatch({
            type: REMOVE_DRAFT,
            payload: id
        })
    
        dispatch({
            type: ADD_DRAFT,
            payload
        })
    }
    

    //  Тут я мог бы создать несколько контекстов, но нет, я же дебил

    return (
        <GlobalContext.Provider value = {{
            showDraft, addCard, fetchDraft, 
            loading: state.loading, count: state.count,
            notes: state.notes, cards: state.cards, removeDraft, 
            fetchCards, removeCard, addMarker, renameDraft
        }}>
            {children}
        </GlobalContext.Provider>
    )
}